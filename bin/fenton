#!/usr/bin/env ruby

require 'fenton'
require 'gli'
require 'highline/import'
require 'excon'
require 'json'
require 'rbnacl'
require 'base64'
require 'digest'

include GLI::App

program_desc 'manage and sign SSH Keys from Fenton Server'

desc "Show current version number"
version Fenton::VERSION

desc 'Be verbose'
switch 'verbose'

sort_help :manually

private_key_default = "#{Dir.home}/.ssh/id_ecdsa"
public_key_default = "#{private_key_default}.pub"

flag [:d, :directory], desc: "Fenton Directory Path", :default_value => "#{Dir.home}/.fenton"

desc 'Client Management'
arg_name 'client'

command :client do |c|
  c.default_desc "Manage Client Access"

  c.flag [:u, :username], desc: "Username", :default_value => ENV['USER']
  c.flag [:e, :email], desc: "Email"

  c.desc 'Signup'
  arg_name 'signup'

  c.command :signup do |c1|
    c1.action do |global_options,options,args|
      help_now!('username is required') if options[:username].nil?
      help_now!('email is required') if options[:email].nil?

      begin
        Dir.mkdir(global_options[:directory])
      rescue Errno::EEXIST => e
        exit 1 unless e.message =~ /File exists/
      end

      if File.exists?("#{global_options[:directory]}/config")
        answer = ask("File exists #{global_options[:directory]}/config, overwrite? (y/N) ")
        exit unless answer =~ /^y$/i
      end

      if File.exists?("#{global_options[:directory]}/auth.key")
        answer = ask("File exists #{global_options[:directory]}/auth.key, overwrite? (y/N) ")
        exit unless answer =~ /^y$/i
      end

      Fenton::User.signup(global_options,options,args)
    end
  end
end

desc 'Manage your SSH Keys'
arg_name 'key'

command :key do |c|
  c.default_desc "Manage your SSH Keys"

  c.desc 'Generate a local ssh key'
  arg_name 'generate'

  c.command :generate do |c1|
    c1.flag [:k, :private_key], desc: "Private key file path to use"
    c1.flag [:P, :passphrase], desc: "Passphrase that protects the private key"

    c1.action do |global_options,options,args|
      puts "Generating keys"

      if options[:k] != private_key_default
        options[:k] = ask("Enter private key to create (#{private_key_default}): ")
        options[:k] = private_key_default if options[:k].empty?
        
        if File.exists?(options[:k])
          answer = ask("File exists, overwrite? (y/N) ")
          exit unless answer =~ /^y$/i
        end
      end

      options[:P] ||= ask("Enter passphrase: ") { |i| i.echo = "*" }
      
      # Fenton::Key.generate(global_options,options,args)
    end
  end

  c.desc 'Sign your local ssh public key'
  arg_name 'sign'

  c.command :sign do |c1|
    c1.flag [:p, :public_key], desc: "Your SSH Pubic Key"

    c1.action do |global_options,options,args|
      puts "Signing public key."

      if options[:p] != public_key_default
        options[:p] = ask("Enter public key to submit (#{public_key_default}): ")
        options[:p] = public_key_default if options[:p].empty?
        exit_now!("No file found by that name #{options[:p]}") unless File.exists?(options[:p])
      end

      exit_now!("No file found by that name #{options[:p]}") unless File.exists?(options[:p])
      
      Fenton::Key.sign(global_options,options,args)
    end
  end

  c.desc 'Get information about your keys'
  arg_name 'show'

  c.command :show do |c1|
    c1.command :ca do |c2|
      c2.action do |global_options,options,args|
        Fenton::Key.ca_public_key(global_options,options,args)
      end
    end
  end
end

# desc 'SSH to servers the Fenton way'
# arg_name 'ssh'

# command :ssh do |c|
#   c.action do |global_options,options,args|
#     c1.flag [:p, :public_key], desc: "Your SSH Pubic Key"

#     if options[:p] != public_key_default
#       options[:p] = ask("Enter public key to submit (#{public_key_default}): ")
#       options[:p] = public_key_default if options[:p].empty?
#       exit_now!("No file found by that name #{options[:p]}") unless File.exists?(options[:p])
#     end

#     exit_now!("No file found by that name #{options[:p]}") unless File.exists?(options[:p])
    
#     Fenton::Ssh.ssh(global_options,options,args)
#   end
# end

# on_error do |ex|
  
# end

exit run(ARGV)
